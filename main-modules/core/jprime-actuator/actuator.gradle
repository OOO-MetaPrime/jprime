import java.time.LocalDateTime
import java.time.ZoneId

ext {
  SUBMODULES_SECTION_NAME = 'submodules'
  PROJECT_VERSION_TITLE = 'Project-Version'
  BUILD_DATE_TITLE = 'Build-Date'
}

static String getDate(String format) {
  LocalDateTime.now(ZoneId.of("Europe/Moscow")).format(format).toString()
}

String getSubmoduleHash() {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'submodule', 'foreach', 'git', 'rev-parse', '--short', 'HEAD'
    standardOutput = stdout
  }
  stdout.toString().trim()
}

String getRootHash() {
  def stdout = new ByteArrayOutputStream()
  exec {
    commandLine 'git', 'rev-parse', '--short', 'HEAD'
    standardOutput = stdout
  }
  stdout.toString().trim()
}

static String getSubmoduleName(String line) {
  String submodule = null
  if (line.contains(/'/)) {
    submodule = line[line.indexOf(/'/) + 1..line.lastIndexOf(/'/) - 1]
    if (submodule.contains('/')) {
      submodule = submodule[submodule.lastIndexOf('/') + 1..submodule.length() - 1]
    }
  }
  if (!submodule) {
    throw new RuntimeException("Submodule status parsing error: unexpected result from command line")
  }
  submodule
}

ext.common = [
    getManifestAttrs    : { ->
      [
          (PROJECT_VERSION_TITLE): getRootHash(),
          (BUILD_DATE_TITLE)     : getDate('yyyy.MM.dd HH:mm:ss')
      ]
    },
    getSubmodulesVersion: { ->
      Map<String, String> attrs = [:]
      String subs = getSubmoduleHash()
      String[] lines = subs.split("\n")
      String submodule = null
      for (String line : lines) {
        if (line.startsWith("Entering")) {
          submodule = getSubmoduleName(line)
        } else if (submodule) {
          attrs += [(submodule): line]
          submodule = null
        } else {
          throw new RuntimeException("Submodule status parsing error: unexpected result from command line")
        }
      }
      attrs
    }
]